package com.xuetu.databases;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StuName = new Property(1, String.class, "stuName", false, "STU_NAME");
        public final static Property StuEmail = new Property(2, String.class, "stuEmail", false, "STU_EMAIL");
        public final static Property StuPhone = new Property(3, String.class, "stuPhone", false, "STU_PHONE");
        public final static Property StuIma = new Property(4, String.class, "stuIma", false, "STU_IMA");
        public final static Property StuSex = new Property(5, String.class, "stuSex", false, "STU_SEX");
        public final static Property StuAge = new Property(6, Integer.class, "stuAge", false, "STU_AGE");
        public final static Property StuUgrade = new Property(7, String.class, "stuUgrade", false, "STU_UGRADE");
        public final static Property StuMajor = new Property(8, String.class, "stuMajor", false, "STU_MAJOR");
        public final static Property StuSigner = new Property(9, String.class, "stuSigner", false, "STU_SIGNER");
        public final static Property StuPoints = new Property(10, Integer.class, "stuPoints", false, "STU_POINTS");
        public final static Property School = new Property(11, Integer.class, "school", false, "SCHOOL");
        public final static Property StuPwd = new Property(12, String.class, "stuPwd", false, "STU_PWD");
        public final static Property Stu_create_date = new Property(13, java.util.Date.class, "Stu_create_date", false, "STU_CREATE_DATE");
    };


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STU_NAME\" TEXT," + // 1: stuName
                "\"STU_EMAIL\" TEXT," + // 2: stuEmail
                "\"STU_PHONE\" TEXT," + // 3: stuPhone
                "\"STU_IMA\" TEXT," + // 4: stuIma
                "\"STU_SEX\" TEXT," + // 5: stuSex
                "\"STU_AGE\" INTEGER," + // 6: stuAge
                "\"STU_UGRADE\" TEXT," + // 7: stuUgrade
                "\"STU_MAJOR\" TEXT," + // 8: stuMajor
                "\"STU_SIGNER\" TEXT," + // 9: stuSigner
                "\"STU_POINTS\" INTEGER," + // 10: stuPoints
                "\"SCHOOL\" INTEGER," + // 11: school
                "\"STU_PWD\" TEXT," + // 12: stuPwd
                "\"STU_CREATE_DATE\" INTEGER);"); // 13: Stu_create_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String stuName = entity.getStuName();
        if (stuName != null) {
            stmt.bindString(2, stuName);
        }
 
        String stuEmail = entity.getStuEmail();
        if (stuEmail != null) {
            stmt.bindString(3, stuEmail);
        }
 
        String stuPhone = entity.getStuPhone();
        if (stuPhone != null) {
            stmt.bindString(4, stuPhone);
        }
 
        String stuIma = entity.getStuIma();
        if (stuIma != null) {
            stmt.bindString(5, stuIma);
        }
 
        String stuSex = entity.getStuSex();
        if (stuSex != null) {
            stmt.bindString(6, stuSex);
        }
 
        Integer stuAge = entity.getStuAge();
        if (stuAge != null) {
            stmt.bindLong(7, stuAge);
        }
 
        String stuUgrade = entity.getStuUgrade();
        if (stuUgrade != null) {
            stmt.bindString(8, stuUgrade);
        }
 
        String stuMajor = entity.getStuMajor();
        if (stuMajor != null) {
            stmt.bindString(9, stuMajor);
        }
 
        String stuSigner = entity.getStuSigner();
        if (stuSigner != null) {
            stmt.bindString(10, stuSigner);
        }
 
        Integer stuPoints = entity.getStuPoints();
        if (stuPoints != null) {
            stmt.bindLong(11, stuPoints);
        }
 
        Integer school = entity.getSchool();
        if (school != null) {
            stmt.bindLong(12, school);
        }
 
        String stuPwd = entity.getStuPwd();
        if (stuPwd != null) {
            stmt.bindString(13, stuPwd);
        }
 
        java.util.Date Stu_create_date = entity.getStu_create_date();
        if (Stu_create_date != null) {
            stmt.bindLong(14, Stu_create_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // stuName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stuEmail
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stuPhone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // stuIma
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // stuSex
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // stuAge
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // stuUgrade
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // stuMajor
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // stuSigner
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // stuPoints
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // school
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // stuPwd
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)) // Stu_create_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStuName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStuEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStuPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStuIma(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStuSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStuAge(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStuUgrade(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStuMajor(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStuSigner(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStuPoints(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSchool(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setStuPwd(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStu_create_date(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
